/* 
 This file was generated by Dashcode.  
 You may edit this file to customize your widget or web page 
 according to the license.txt file included in the project.
 */

var timer;
var startTime;
var endTime;
var timerOn = false;
var userId;
var currentProject;

//
// Function: load()
// Called by HTML body element's onload event when the widget is ready to start
//

function load()
{
    var serverPref = getPreferenceForKey('server', true);
    var usernamePref = getPreferenceForKey('username', true);
    var passwordPref = getPreferenceForKey('password', true);
    server.value = serverPref ? serverPref : "";
    username.value = usernamePref ? usernamePref : "";
    password.value = passwordPref ? passwordPref : "";
    
    login(server.value, username.value, password.value);
    
    dashcode.setupParts();
    document.getElementById("history-drop").dropped = false;
}

//
// Function: remove()
// Called when the widget has been removed from the Dashboard
//
function remove()
{
    // Stop any timers to prevent CPU usage
    // Remove any preferences as needed
    // widget.setPreferenceForKey(null, dashcode.createInstancePreferenceKey("your-key"));
}

//
// Function: hide()
// Called when the widget has been hidden
//
function hide()
{
    clearInterval(timer);
}

//
// Function: show()
// Called when the widget has been shown
//
function show()
{
    if (startTime && timerOn)
        startTimer();
}

//
// Function: sync()
// Called when the widget has been synchronized with .Mac
//
function sync()
{
    // Retrieve any preference values that you need to be synchronized here
    // Use this for an instance key's value:
    // instancePreferenceValue = widget.preferenceForKey(null, dashcode.createInstancePreferenceKey("your-key"));
    //
    // Or this for global key's value:
    // globalPreferenceValue = widget.preferenceForKey(null, "your-key");
}

//
// Function: showBack(event)
// Called when the info button is clicked to show the back of the widget
//
// event: onClick event from the info button
//
function showBack(event)
{
    var front = document.getElementById("front");
    var back = document.getElementById("back");

    if (window.widget) {
        widget.prepareForTransition("ToBack");
    }

    front.style.display = "none";
    back.style.display = "block";

    if (window.widget) {
        setTimeout('widget.performTransition();', 0);
    }
}

//
// Function: showFront(event)
// Called when the done button is clicked from the back of the widget
//
// event: onClick event from the done button
//
function showFront(event)
{
    var front = document.getElementById("front");
    var back = document.getElementById("back");

    if (window.widget) {
        widget.prepareForTransition("ToFront");
    }

    front.style.display="block";
    back.style.display="none";

    if (window.widget) {
        setTimeout('widget.performTransition();', 0);
    }
}

if (window.widget) {
    widget.onremove = remove;
    widget.onhide = hide;
    widget.onshow = show;
    widget.onsync = sync;
}

function zeroPad(num,count)
{
    var numZeropad = num + '';
    while(numZeropad.length < count) {
        numZeropad = "0" + numZeropad;
    }
    return numZeropad;
}

function formatTimeSpan(milliseconds)
{
    var seconds = milliseconds / 1000;
    var minutes = parseInt(seconds / 60);
    var hours = parseInt(minutes / 60);
    var printMinutes = parseInt(minutes % 60);
    var printSeconds = parseInt(seconds % 60);
    
    return hours + ':' + zeroPad(printMinutes, 2) + ':' + zeroPad(printSeconds, 2);
}

function startNewTask(event)
{
    currentProject = new TimeRecordData();
    currentProject.ProjectId = document.getElementById("projectname").value;
    currentProject.TaskId = document.getElementById("taskname").value;
    currentProject.UserId = userId;
    currentProject.CardId = document.getElementById("cardname").value;
    
    startTimeRecord(currentProject, function(data) {
        if (data && data.Success) {
            currentProject.Id = data.Item.Id;
        }
    });
    
    startTime = new Date();
    timerOn = true;
    startTimer();
}

function startTimer()
{
    $('#textField').val(formatTimeSpan(new Date() - startTime));

    timer = setInterval(function() {
        $('#textField').val(formatTimeSpan(new Date() - startTime));
    }, 1000);
    document.getElementById("start-btn").style.visibility = "hidden";
    document.getElementById("stop-btn").style.visibility = "visible";
}

function stopTask(event)
{
    endTime = new Date();
    clearInterval(timer);
    timerOn = false;
    disableButton(document.getElementById("stop-btn"));
    showSubmitDrop();
}

function showSubmitDrop()
{
    window.resizeTo(358, 411);
    // Values you provide
    var duration = 500;	// The length of the animation
    var interval = 13;	// How often the animation should change
    var start = 74;	// The starting value
    var finish = 221;	// The finishing value
    var handler = function(animation, current, start, finish) {
        document.getElementById("submit-drop-area").style.top = current + "px";
    };

    // Animation code
    new AppleAnimator(duration, interval, start, finish, handler).start();

}

function createKey (key)
{
        return widget.identifier + "-" + key
}

function setPreferenceForKey (pref, key)
{
        // set both the per widget pref
        widget.setPreferenceForKey(pref, createKey(key));
        // Don't set global
        // widget.setPreferenceForKey(pref, key);
}

function getPreferenceForKey (key, global)
{
        // first check to see if we have a per instance one
        var pref = widget.preferenceForKey(createKey(key));
        
        if (pref == null && global)
        {
                // now check the global one
                pref = widget.preferenceForKey(key);
        }
        
        return pref;
}

function saveSettingsAndFlip(event)
{
    setPreferenceForKey(server.value, 'server');
    setPreferenceForKey(username.value, 'username');
    setPreferenceForKey(password.value, 'password');
    login(server.value, username.value, password.value);
    showFront(event);
}

function handleLogin(data, textStatus, XMLHttpResponse)
{
    //alert(XMLHttpResponse.responseText);
    //alert(data.Item);
    if (data.Success) {
        loadProjects(attachProjectsToList);
        loadTaskList(attachTasksToList);
        document.getElementById("message-area").innerHTML = "";
        userId = data.Item;
    }
    else {
        document.getElementById("message-area").innerHTML = "There was an error logging in.";
        showBack();
    }
}

function handleError(XMLHttpRequest, textStatus, errorThrown)
{
    document.getElementById("message-area").innerHTML = "There was an error logging in.";
    showBack();
}

function login(server, username, password)
{
    if (!server || !username || !password) {
        document.getElementById("message-area").innerHTML = "Fill in all the fields.";
        showBack();
        return;
    }
    
    $.ajax({
        async: true,
        data: {Login: username, Password: password},
        dataType: 'json',
        error: handleError,
        success: handleLogin,
        type: 'POST',
        url: server.match(new RegExp('^https?:\/\/')) ? server + '/account/loginajax' : 'http://' + server + '/account/loginajax'
    });
}

function attachProjectsToList(data)
{
    $('#projectname :gt(0)').remove();
    var projects = data.Item;
    for (var i = 0; i < projects.length; ++i) {
        $('#projectname').append('<option class="apple-hidden" value="' + projects[i].Id + '">' + projects[i].Name + '</option>');
    }
}

function attachTasksToList(data)
{
    $('#taskname :gt(0)').remove();
    var tasks = data.Item;
    for (var i = 0; i < tasks.length; ++i) {
        $('#taskname').append('<option class="apple-hidden" value="' + tasks[i].Id + '">' + tasks[i].Name + '</option>');
    }
}

function updateCardList(data) {
    $('#cardname :gt(0)').remove();
    var cards = data.Item;
    for (var i = 0; i < cards.length; ++i) {
        $('#cardname').append('<option class="apple-hidden" value="' + cards[i].Id + '">' + cards[i].Name + '</option>');
    }
}

function handleProjectChange(event)
{
    var id = event.currentTarget.value;
    var cardList = document.getElementById("cardname");
    if (id) {
        loadCardList(id, updateCardList);
        var fadeHandler = function(a, c, s, f){ cardList.style.opacity = c; };
        new AppleAnimator(500, 13, 0.3, 1.0, fadeHandler).start();
    }
    else {
        loadCardList(id, updateCardList);
        var fadeHandler = function(a, c, s, f){ cardList.style.opacity = c; };
        new AppleAnimator(500, 13, 1.0, 0.3, fadeHandler).start();
        updateCardList({Item: []});
        disableButton(document.getElementById("start-btn"));
    }
}


function handleCardChange(event)
{
    var buttonToEnable = document.getElementById("start-btn");	// enable with ID of button
    if (event.currentTarget.value) {
        enableButton(buttonToEnable);
    }
    else {
        disableButton(buttonToEnable);
    }
}

function enableButton(button)
{
    button.object.setEnabled(true);
    // Fading code
    var fadeHandler = function(a, c, s, f){ button.style.opacity = c; };
    new AppleAnimator(500, 13, 0.3, 1.0, fadeHandler).start();
}

function disableButton(button) {
    button.object.setEnabled(false);
    // Fading code
    var fadeHandler = function(a, c, s, f){ button.style.opacity = c; };
    new AppleAnimator(500, 13, 1.0, 0.3, fadeHandler).start();
}

function toggleDropArea(event)
{
    var dropArea = document.getElementById("history-drop");
    if (!dropArea.dropped) {
        openHistoryDrop();
        dropArea.dropped = true;
    }
    else {
        closeHistoryDrop();
        dropArea.dropped = false;
    }
}

function updateHistory(data)
{
    var history = data.Item;
    var oldList = document.getElementById("time-record-list");
    if (oldList) {
        document.getElementById("history-drop").removeChild(oldList);
    }
    
    var list = document.createElement("ul");
    list.setAttribute("id", "time-record-list");

    for (var i = 0; i < history.length; ++i) {
        list.appendChild(buildHistoryItem(new TimeRecord(history[i])));
    }
    
    document.getElementById("history-drop").appendChild(list);
}

function buildHistoryItem(item) {
    var li = document.createElement("li");
    $(li).addClass("time-record");
    
    var meta = document.createElement("div");
    $(meta).addClass("time-record-meta");
    
    var times = document.createElement("div");
    $(times).addClass("card-times");
    
    var clockedTime = document.createElement("span");
    $(clockedTime).addClass("clocked-time");
    clockedTime.appendChild(document.createTextNode(item.Duration));
    
    var billedTime = document.createElement("span");
    $(billedTime).addClass("billed-time");
    billedTime.appendChild(document.createTextNode(item.Billable));
    
    var timeSeparator = document.createTextNode("/");
    
    times.appendChild(clockedTime);
    times.appendChild(timeSeparator);
    times.appendChild(billedTime);
    
    var projectName = document.createElement("span");
    $(projectName).addClass("project-name");
    projectName.appendChild(document.createTextNode(item.ProjectName));
    
    var mdash = document.createTextNode("—");
    
    var cardDesc = document.createElement("span");
    $(cardDesc).addClass("card-name");
    cardDesc.appendChild(document.createTextNode(item.CardDesc));
    
    var description = document.createElement("p");
    $(description).addClass("time-record-description");
    description.appendChild(document.createTextNode(item.Description));
    
    li.appendChild(meta);
    li.appendChild(description);
    
    meta.appendChild(times);
    meta.appendChild(projectName);
    meta.appendChild(mdash);
    meta.appendChild(cardDesc);
    
    return li;
}

function openHistoryDrop()
{
    getLogForUser(userId, updateHistory);
    window.resizeTo(358, 585);
    // Values you provide
    duration = 500;	// The length of the animation
    interval = 13;	// How often the animation should change
    start = 16;	// The starting value
    finish = 288;	// The finishing value
    
    handler = function(animation, current, start, finish) {
        // Called every interval; provides a current value between start and finish
        document.getElementById("history-drop").style.top = current + "px";
    };

    // Animation code
    new AppleAnimator(duration, interval, start, finish, handler).start();
    
    var rotationHandler = function(animation, current, start, finish) {
        document.getElementById("open-close-btn").style["-webkit-transform"] = "rotate(" + current + "deg)";
    };
    
    new AppleAnimator(500, 13, 0, -180, rotationHandler).start();
}

function closeHistoryDrop()
{
    // Values you provide
    var duration = 500;	// The length of the animation
    var interval = 13;	// How often the animation should change
    var start = 288;	// The starting value
    var finish = 16;	// The finishing value
    var handler = function(animation, current, start, finish) {
        // Called every interval; provides a current value between start and finish
        document.getElementById("history-drop").style.top = current + "px";
        if (current == finish) window.resizeTo(358, 323);
    };

    // Animation code
    new AppleAnimator(duration, interval, start, finish, handler).start();
        var rotationHandler = function(animation, current, start, finish) {
        document.getElementById("open-close-btn").style["-webkit-transform"] = "rotate(" + current + "deg)";
    };
    
    new AppleAnimator(500, 13, -180, 0, rotationHandler).start();
}

function handleDoneClick(event)
{
    var serverPref = getPreferenceForKey('server', true);
    var usernamePref = getPreferenceForKey('username', true);
    var passwordPref = getPreferenceForKey('password', true);
    server.value = serverPref ? serverPref : "";
    username.value = usernamePref ? usernamePref : "";
    password.value = passwordPref ? passwordPref : "";
    
    login(server.value, username.value, password.value);
}


function handleTaskChange(event)
{
    if (event.currentTarget.value) {
        enableButton(document.getElementById("stop-btn"));
    }
    else {
        disableButton(document.getElementById("stop-btn"));
    }
}

function handleSubmit(event)
{
    // Do server call thingy.
    // Values you provide
    var duration = 500;	// The length of the animation
    var interval = 13;	// How often the animation should change
    var start = 221;	// The starting value
    var finish = 74;	// The finishing value
    var handler = function(animation, current, start, finish) {
        // Called every interval; provides a current value between start and finish
        document.getElementById("submit-drop-area").style.top = current + "px";
        if (finish == current) window.resizeTo(358, 323);
    };

    // Animation code
    new AppleAnimator(duration, interval, start, finish, handler).start();
    
    document.getElementById("stop-btn").style.visibility = "hidden";
    document.getElementById("start-btn").style.visibility = "visible";
    enableButton(document.getElementById("start-btn"));
    
    currentProject.TaskId = document.getElementById("taskname").value;
    var el = document.getElementById("bill-txt-field");
    currentProject.Description = document.getElementById("description-area").value;
    currentProject.Duration = endTime.getTime() / 3600000.0 - startTime.getTime() / 3600000.0;
    currentProject.Billable = document.getElementById("bill-txt-field").value;
    window.console.log(currentProject.Duration);
    
    stopTimeRecord(currentProject, function(data) {
        if (data && data.Success) {
            currentProject = null;
            document.getElementById("description-area").value = "";
            document.getElementById("bill-txt-field").value = "";
        }
    });
}

function getLogForUser(userId, callback) {
	$.ajax({
        url: 'http://' + getPreferenceForKey('server', true) + '/timerecord/widgetlog',
        type: 'POST',
        data: { UserId: userId },
        dataType: 'json',
        success: callback
    });
}
